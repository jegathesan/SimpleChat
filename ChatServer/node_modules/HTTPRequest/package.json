{
  "author": {
    "name": "Kevin Whitman",
    "url": "https://github.com/keverw"
  },
  "name": "HTTPRequest",
  "description": "A simple yet powerful HTTP request library inspired by jQuery and LSL.",
  "version": "0.1.1",
  "repository": {
    "type": "git",
    "url": "https://github.com/keverw/HTTPRequest"
  },
  "main": "HTTPRequest.js",
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "[![build status](https://secure.travis-ci.org/keverw/HTTPRequest.png)](http://travis-ci.org/keverw/HTTPRequest)\n#HTTPRequest v0.1.1#\n\nA simple yet powerful HTTP request library inspired by jQuery and LSL written in Javascript for client(framework independent) and server(Node.js) Javascript.\n\n## Setup##\n\nTo set up HTTPRequest on your Node.js server use npm(case sensitive package name).\n\n\tnpm install HTTPRequest\n\nIf you want to use HTTPRequest on the client-side (browser), just include HTTPRequest.js into your page.\n\n\t<script type='text/javascript' src='HTTPRequest.js'></script>\n\n##Example##\nFirst, you have to require the HTTPRequest module (if you're using it client-side, this isn't necessary).\n\n\tvar HTTPRequest = require('HTTPRequest');\n\n```\nHTTPRequest.get('get_test.php', function(status, headers, content)\n{\n\tconsole.log(status, headers, content);\n});\n```\n\n[Recaptcha](https://gist.github.com/2862894/bed9f28eb497e4810fee68d9600ace52469d6047) - A small [reCAPTCHA](http://www.google.com/recaptcha) module I wrote that depends on this module.\n\n##request##\n`request(url, parameters, callback)`\nA lower level function, but I hope you never really need to use it as `post`, `get` is a wrapper around it.\n\n##stop requests##\n\n* `stopID(id)`\n* `stopTag(tag)`\n* `stopAll()`\n\nWhen a request is stopped, the callback isn't called for the request.\n\n##post##\n\n`post(url, data, callback, options)`\n\nA url, data(object, can be empty also `{}`), callback are required.\noptions is not required, but it's a object.\n\n##get##\n`get(url, callback, options)`\nurl and callback are required. \n\noptions is not required, but it's a object.\n\n##delete##\n`del(url, callback, options)`\n\nsame as get\n\n##put##\n`put(url, data, callback, options)`\n\nsame as post\n\n##encode##\n`encode(url)`\n\ntakes a url and escapes it, then returns it.\n\n##decode##\n`encode(url)`\n\ntakes a decodeed url and Unencode's it, then returns it.\n\n\n##options##\n\n*option names are NOT case sensitive.\n\n* `QUERY` - `string` or `object` - appends to the end of the `url`.\n* `DATA` - `'POST'` or `'PUT'` data `string` or `object`\n* `DATATYPE` - the expected content type. See content type section for more details. The value of this isn't case sensitive.\n* `TAG` - a tag to be used in `processedCallback`, `newRequestCallback`, also doesn't have to be unique. The `defaultTag` is `untagged`. You can override the default by `HTTPRequest.defaultTag = 'TextHere';`\n\n##server side only options##\n* `USERAGENT` - string - Write your own [user agent](http://en.wikipedia.org/wiki/User_agent), default is `node.js`. This is a alias/shortcut insead of setting your own headers\n* `HEADERS` - An object containing your own defined headers.\n\n##parameters##\nEverything as options, but also:\n\n`METHOD` - string - `'GET'`, `'POST'`, `'PUT'` and `'DELETE'`, default is `'GET'`\n\n##DATATYPE##\n`DATATYPE` can be set as the type of content you expected from the server.\n\n* [`JSON`](http://en.wikipedia.org/wiki/JSON) - when set as json, callback `contents` will be a object of the JSON when valid JSON, `null` when invalid JSON.\n\n\n##callback##\n\n`status, headers, content`\n\n* `status` - is an [HTTP status code](http://en.wikipedia.org/wiki/List_of_HTTP_status_codes) (like 404 or 200)\n* `headers` - is an object with the respone http headers\n* `content` - contains the requests response.\n\n##Ajax stop and start callbacks\n\n```\nfunction ajaxLoaderStart()\n{\n\tconsole.log('Started');\n}\n\nHTTPRequest.setAjaxStart(ajaxLoaderStart); //this call back is called when no pending HTTP requests exists.\n\nfunction ajaxLoaderStop()\n{\n\tconsole.log('Stopped');\n}\n\nHTTPRequest.setAjaxStop(ajaxLoaderStop); //this get's called when all the pending HTTP requests are finished.\n\n```\n\nThese are great for providing a loading spinner on the page.\n\n##Processed ID Callback \n\n```\nfunction processedID(tag, id)\n{\n\tconsole.log('processed: ' + tag + ' , ' + id);\n}\n\nHTTPRequest.setProcessedCallback(processedID);\n\n```\n\n##New Request Callback\n```\nfunction newRequestID(tag, id)\n{\n\tconsole.log('new id: ' + tag + ' , ' + id);\n}\n\nHTTPRequest.setnewRequestCallback(newRequestID);\n\n```\n\n##credits##\n* `trim` , `encode` and `encode` functions are from [php.js](http://phpjs.org/pages/home)\n* `parseJSON` function is from [jQuery v1.7.2](http://jquery.com/), but does not require jQuery as it's inclued in the same namespace.\n* Major thanks to [node-XMLHttpRequest](https://github.com/driverdan/node-XMLHttpRequest) for giving us a XMLHttpRequest Object, that really helps make this both client and server side.",
  "_id": "HTTPRequest@0.1.1",
  "dist": {
    "shasum": "7a8c189e520079e055950a75622433e5723f8b35",
    "tarball": "http://registry.npmjs.org/HTTPRequest/-/HTTPRequest-0.1.1.tgz"
  },
  "_npmVersion": "1.1.59",
  "_npmUser": {
    "name": "keverw",
    "email": "keverw92@gmail.com"
  },
  "maintainers": [
    {
      "name": "keverw",
      "email": "keverw92@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "7a8c189e520079e055950a75622433e5723f8b35",
  "_from": "HTTPRequest@",
  "_resolved": "https://registry.npmjs.org/HTTPRequest/-/HTTPRequest-0.1.1.tgz"
}
